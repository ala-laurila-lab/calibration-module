function loadNdfFromCSV()

date = datestr(datenum('05-07-2016', 'dd-mm-yyyy'));
path = which('ndf_05_07_2016.csv');
ndfTable = importfile(path, 2, 12);

s = service.CalibrationService('A');
ndfs = unique(ndfTable.ndf);

disp('ndf meanTransmitance opticalDensity \n');
for i = 1 : numel(ndfs)
    e = entity.NDFMeasurement(ndfs{i});
    e = s.get(e);
    info = sprintf('%s \t %f \t %f', ndfs{i}, e.meanTransmitance, e.opticalDensity);
    disp(info);
end

return

s = service.CalibrationService('A');
[~, indices] = sort(ndfTable.ndf);

ndf = ndfTable.ndf{indices(1)};
index = 1;

e = entity.NDFMeasurement(ndf);
e.calibrationDate = date;

for i = 1 : numel(indices)
    subscript = indices(i);
    ndf = ndfTable.ndf{subscript};
    
    if ~ strcmp(ndf, e.ndfName)
        e = entity.NDFMeasurement(ndf);
        e.isGroupCreated = 1;
        e.calibrationDate = date;
        index = 1;
    end
    e.voltages(index) =  ndfTable.voltages(subscript);
    e.voltageExponent(index) =  ndfTable.voltageExponent(subscript);
    e.powers(index) =  ndfTable.powers(subscript);
    e.powerExponent(index) =  ndfTable.powerExponent(subscript);
    e.powerWithNdf(index) =  ndfTable.powerWithNdf(subscript);
    e.powerWithNdfExponent(index) =  ndfTable.powerWithNdfExponent(subscript);
    index = index + 1;
    s.add(e);
end
end

function ndf2 = importfile(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   NDF2 = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for the
%   default selection.
%
%   NDF2 = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   ndf2 = importfile1('ndf_05_07_2016.csv', 1, 13);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2016/08/04 13:54:46

%% Initialize variables.
delimiter = ',';
if nargin<=2
    startRow = 1;
    endRow = inf;
end

%% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(1)-1, 'ReturnOnError', false);
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'HeaderLines', startRow(block)-1, 'ReturnOnError', false);
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[2,3,4,5,6,7]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(numbers, thousandsRegExp, 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch me
        end
    end
end


%% Split data into numeric and cell columns.
rawNumericColumns = raw(:, [2,3,4,5,6,7]);
rawCellColumns = raw(:, 1);


%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
ndf2 = table;
ndf2.ndf = rawCellColumns(:, 1);
ndf2.voltages = cell2mat(rawNumericColumns(:, 1));
ndf2.voltageExponent = cell2mat(rawNumericColumns(:, 2));
ndf2.powers = cell2mat(rawNumericColumns(:, 3));
ndf2.powerExponent = cell2mat(rawNumericColumns(:, 4));
ndf2.powerWithNdf = cell2mat(rawNumericColumns(:, 5));
ndf2.powerWithNdfExponent = cell2mat(rawNumericColumns(:, 6));


end
